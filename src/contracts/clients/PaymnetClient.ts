/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import { getAppClient, getTransactionWithSigner, sendAtomicTransactionComposer } from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve(address,uint64)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receive()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "contract_redeem(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "token": {
          "type": "uint64",
          "key": "token"
        },
        "tokenBalance": {
          "type": "uint64",
          "key": "tokenBalance"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgMTgwMDAwMDAwMDAKYnl0ZWNibG9jayAweDYxNzA3MDcyNmY3NjY1NjQ1ZjczNzA2NTZlNjQ2OTZlNjcgMHg2ODZmNmM2NDY1NzI3MzVmNjI2MTZjNjE2ZTYzNjU3MyAweDc0NmY2YjY1NmU0MjYxNmM2MTZlNjM2NSAweDc0NmY2YjY1NmUgMHgxNTFmN2M3NSAweAoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDUuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGJvb3RzdHJhcCgpdWludDY0CiphYmlfcm91dGVfYm9vdHN0cmFwOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyA0IC8vIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGJvb3RzdHJhcCgpdWludDY0CgljYWxsc3ViIGJvb3RzdHJhcAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGJvb3RzdHJhcCgpOiBBc3NldElECmJvb3RzdHJhcDoKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyA1IC8vIDB4CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czoxOQoJLy8gYXNzZXJ0KCF0aGlzLnRva2VuLmV4aXN0cywgJ0FscmVhZHkgZXhpc3RzJykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGVjIDMgLy8gICJ0b2tlbiIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCgkvLyBBbHJlYWR5IGV4aXN0cwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czoyMAoJLy8gdGhpcy50b2tlbkJhbGFuY2UudmFsdWUgPSBCQUxBTkNFCglieXRlYyAyIC8vICAidG9rZW5CYWxhbmNlIgoJaW50YyAyIC8vIDE4MDAwMDAwMDAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjEKCS8vIHJlZ2lzdGVyZWRBc2EgPSBzZW5kQXNzZXRDcmVhdGlvbih7CgkvLyAgICAgICBjb25maWdBc3NldFRvdGFsOiBCQUxBTkNFLAoJLy8gICAgICAgY29uZmlnQXNzZXREZWNpbWFsczogMCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RnJlZXplOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXROYW1lOiAnTmFpcmEnLAoJLy8gICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ05HTicsCgkvLyAgICAgICBjb25maWdBc3NldENsYXdiYWNrOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglwdXNoaW50IDMgLy8gYWNmZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjIKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IEJBTEFOQ0UKCWludGMgMiAvLyAxODAwMDAwMDAwMAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czoyMwoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjQKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjUKCS8vIGNvbmZpZ0Fzc2V0TmFtZTogJ05haXJhJwoJcHVzaGJ5dGVzIDB4NGU2MTY5NzI2MSAvLyAiTmFpcmEiCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjYKCS8vIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdOR04nCglwdXNoYnl0ZXMgMHg0ZTQ3NGUgLy8gIk5HTiIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MjcKCS8vIGNvbmZpZ0Fzc2V0Q2xhd2JhY2s6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjI4CgkvLyBjb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCWZyYW1lX2J1cnkgMCAvLyByZWdpc3RlcmVkQXNhOiB1aW50NjQKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjMwCgkvLyB0aGlzLnRva2VuLnZhbHVlID0gcmVnaXN0ZXJlZEFzYQoJYnl0ZWMgMyAvLyAgInRva2VuIgoJZnJhbWVfZGlnIDAgLy8gcmVnaXN0ZXJlZEFzYTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6MzEKCS8vIHJldHVybiByZWdpc3RlcmVkQXNhOwoJZnJhbWVfZGlnIDAgLy8gcmVnaXN0ZXJlZEFzYTogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIGFwcHJvdmUoYWRkcmVzcyx1aW50NjQpYm9vbAoqYWJpX3JvdXRlX2FwcHJvdmU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDQgLy8gMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYWRkcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoYWRkcikgZm9yIGFwcHJvdmUgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXBwcm92ZShhZGRyZXNzLHVpbnQ2NClib29sCgljYWxsc3ViIGFwcHJvdmUKCXB1c2hieXRlcyAweDAwCglpbnRjIDAgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBhcHByb3ZlKGFkZHI6IEFkZHJlc3MsIGFtb3VudDogdWludDY0KTogYm9vbGVhbgovLwovLyBJbmNyZWFzZXMgdGhlIGFwcHJvdmVkIHNwZW5kaW5nIGJhbGFuY2Ugb2YgdGhlIGdpdmVuIGFkZHJlc3MgYnkgdGhlIGdpdmVuIGFtb3VudC4KLy8gSWYgdGhlIGFwcHJvdmVkIHNwZW5kaW5nIGJhbGFuY2UgZm9yIHRoZSBnaXZlbiBhZGRyZXNzIGRvZXMgbm90IGV4aXN0LCBpdCBpcyBjcmVhdGVkLgovLyBAcGFyYW0gYWRkciBUaGUgYWRkcmVzcyBmb3Igd2hpY2ggdG8gaW5jcmVhc2UgdGhlIGFwcHJvdmVkIHNwZW5kaW5nIGJhbGFuY2UKLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIGluY3JlYXNlIHRoZSBhcHByb3ZlZCBzcGVuZGluZyBiYWxhbmNlCi8vIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgc2VuZGVyIGlzIG5vdCB0aGUgY3JlYXRvciBvZiB0aGUgYXBwCmFwcHJvdmU6Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjQyCgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyLCAnTm8gcGVybWlzc2lvbicpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCXR4biBTZW5kZXIKCT09CgoJLy8gTm8gcGVybWlzc2lvbgoJYXNzZXJ0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6NDQKCS8vIHRoaXMuYXBwcm92ZWRTcGVuZGluZyhhZGRyKS5leGlzdHMKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCWZyYW1lX2RpZyAtMSAvLyBhZGRyOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo0NQoJLy8gdGhpcy5hcHByb3ZlZFNwZW5kaW5nKGFkZHIpLnZhbHVlID4gMAoJYnl0ZWMgMCAvLyAgImFwcHJvdmVkX3NwZW5kaW5nIgoJZnJhbWVfZGlnIC0xIC8vIGFkZHI6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKGFkZHIpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWludGMgMCAvLyAwCgk+CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo0NgoJLy8gdGhpcy5hcHByb3ZlZFNwZW5kaW5nKGFkZHIpLnZhbHVlICs9IGFtb3VudAoJYnl0ZWMgMCAvLyAgImFwcHJvdmVkX3NwZW5kaW5nIgoJZnJhbWVfZGlnIC0xIC8vIGFkZHI6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKGFkZHIpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJKwoJYnl0ZWMgMCAvLyAgImFwcHJvdmVkX3NwZW5kaW5nIgoJZnJhbWVfZGlnIC0xIC8vIGFkZHI6IEFkZHJlc3MKCWNvbmNhdAoJc3dhcAoJaXRvYgoJYm94X3B1dAoKKmlmMV9lbmQ6CgliICppZjBfZW5kCgoqaWYwX2Vsc2U6CgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjQ5CgkvLyB0aGlzLmFwcHJvdmVkU3BlbmRpbmcoYWRkcikudmFsdWUgPSBhbW91bnQKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCWZyYW1lX2RpZyAtMSAvLyBhZGRyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJYm94X3B1dAoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjUxCgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMSAvLyAxCglyZXRzdWIKCi8vIHJlY2VpdmUoKXVpbnQ2NAoqYWJpX3JvdXRlX3JlY2VpdmU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDQgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgcmVjZWl2ZSgpdWludDY0CgljYWxsc3ViIHJlY2VpdmUKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyByZWNlaXZlKCk6IHVpbnQ2NApyZWNlaXZlOgoJcHJvdG8gMCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDUgLy8gMHgKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjY0CgkvLyBhc3NlcnQodGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikuZXhpc3RzLCAnTm8gcGVybWlzc2lvbicpCglieXRlYyAwIC8vICAiYXBwcm92ZWRfc3BlbmRpbmciCgl0eG4gU2VuZGVyCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoKCS8vIE5vIHBlcm1pc3Npb24KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6NjUKCS8vIGFzc2VydCh0aGlzLmFwcHJvdmVkU3BlbmRpbmcodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA+IDAsICdJbnN1ZmZpY2llbnQnKQoJYnl0ZWMgMCAvLyAgImFwcHJvdmVkX3NwZW5kaW5nIgoJdHhuIFNlbmRlcgoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmFwcHJvdmVkU3BlbmRpbmcodGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglidG9pCglpbnRjIDAgLy8gMAoJPgoKCS8vIEluc3VmZmljaWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo2NgoJLy8gcHJldlZhbHVlID0gdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIHByZXZWYWx1ZTogdWludDY0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo2OAoJLy8gYXNzZXJ0KHRoaXMuYXBwcm92ZWRTcGVuZGluZyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlIDw9IHRoaXMudG9rZW5CYWxhbmNlLnZhbHVlLCAnSW5zdWZmaWNpZW50JykKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYnRvaQoJYnl0ZWMgMiAvLyAgInRva2VuQmFsYW5jZSIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoKCS8vIEluc3VmZmljaWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo2OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwcm92ZWRTcGVuZGluZyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlLAoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglwdXNoaW50IDQgLy8gYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjcwCgkvLyBhc3NldEFtb3VudDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYnRvaQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6NzEKCS8vIHhmZXJBc3NldDogdGhpcy50b2tlbi52YWx1ZQoJYnl0ZWMgMyAvLyAgInRva2VuIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo3MgoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo3NAoJLy8gdGhpcy50b2tlbkJhbGFuY2UudmFsdWUgLT0gdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWJ5dGVjIDIgLy8gICJ0b2tlbkJhbGFuY2UiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMCAvLyAgImFwcHJvdmVkX3NwZW5kaW5nIgoJdHhuIFNlbmRlcgoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmFwcHJvdmVkU3BlbmRpbmcodGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglidG9pCgktCglieXRlYyAyIC8vICAidG9rZW5CYWxhbmNlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjc1CgkvLyB0aGlzLmhvbGRlcnNCYWxhbmNlcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlICs9IHRoaXMuYXBwcm92ZWRTcGVuZGluZyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglieXRlYyAxIC8vICAiaG9sZGVyc19iYWxhbmNlcyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5ob2xkZXJzQmFsYW5jZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglidG9pCglieXRlYyAwIC8vICAiYXBwcm92ZWRfc3BlbmRpbmciCgl0eG4gU2VuZGVyCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYXBwcm92ZWRTcGVuZGluZyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCSsKCWJ5dGVjIDEgLy8gICJob2xkZXJzX2JhbGFuY2VzIgoJdHhuIFNlbmRlcgoJY29uY2F0Cglzd2FwCglpdG9iCglib3hfcHV0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo3NgoJLy8gdGhpcy5hcHByb3ZlZFNwZW5kaW5nKHRoaXMudHhuLnNlbmRlcikuZGVsZXRlKCkKCWJ5dGVjIDAgLy8gICJhcHByb3ZlZF9zcGVuZGluZyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2RlbAoKCS8vIGNvbnRyYWN0cy9QYXltZW50LmFsZ28udHM6NzcKCS8vIHJldHVybiBwcmV2VmFsdWU7CglmcmFtZV9kaWcgMCAvLyBwcmV2VmFsdWU6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBjb250cmFjdF9yZWRlZW0odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jb250cmFjdF9yZWRlZW06CgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY29udHJhY3RfcmVkZWVtKHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNvbnRyYWN0X3JlZGVlbQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY29udHJhY3RfcmVkZWVtKGFtb3VudDogdWludDY0KTogdm9pZApjb250cmFjdF9yZWRlZW06Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjgxCgkvLyBhc3NlcnQodGhpcy5ob2xkZXJzQmFsYW5jZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZSA+PSBhbW91bnQsICdJbnN1ZmZpY2llbnQnKQoJYnl0ZWMgMSAvLyAgImhvbGRlcnNfYmFsYW5jZXMiCgl0eG4gU2VuZGVyCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaG9sZGVyc0JhbGFuY2VzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0Cgk+PQoKCS8vIEluc3VmZmljaWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo4MwoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IGFtb3VudDogYW1vdW50LCB4ZmVyQXNzZXQ6IHRoaXMudG9rZW4udmFsdWUgfSkKCS8vIHZlcmlmeSBhbW91bnQKCXR4biBBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuIiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImFtb3VudCJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgeGZlckFzc2V0Cgl0eG4gWGZlckFzc2V0CglieXRlYyAzIC8vICAidG9rZW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6InRoaXMudG9rZW4udmFsdWUifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BheW1lbnQuYWxnby50czo4NAoJLy8gdGhpcy50b2tlbkJhbGFuY2UudmFsdWUgKz0gdGhpcy5ob2xkZXJzQmFsYW5jZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYnl0ZWMgMiAvLyAgInRva2VuQmFsYW5jZSIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxIC8vICAiaG9sZGVyc19iYWxhbmNlcyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5ob2xkZXJzQmFsYW5jZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglidG9pCgkrCglieXRlYyAyIC8vICAidG9rZW5CYWxhbmNlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvUGF5bWVudC5hbGdvLnRzOjg1CgkvLyB0aGlzLmhvbGRlcnNCYWxhbmNlcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlIC09IGFtb3VudAoJYnl0ZWMgMSAvLyAgImhvbGRlcnNfYmFsYW5jZXMiCgl0eG4gU2VuZGVyCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaG9sZGVyc0JhbGFuY2VzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CgktCglieXRlYyAxIC8vICAiaG9sZGVyc19iYWxhbmNlcyIKCXR4biBTZW5kZXIKCWNvbmNhdAoJc3dhcAoJaXRvYgoJYm94X3B1dAoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50YyAxIC8vIDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4Yjg0NDdiMzYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweDc4NmI2MjkxIC8vIG1ldGhvZCAiYm9vdHN0cmFwKCl1aW50NjQiCglwdXNoYnl0ZXMgMHg3MTgyOTVlMCAvLyBtZXRob2QgImFwcHJvdmUoYWRkcmVzcyx1aW50NjQpYm9vbCIKCXB1c2hieXRlcyAweDM5ZWJkMTQzIC8vIG1ldGhvZCAicmVjZWl2ZSgpdWludDY0IgoJcHVzaGJ5dGVzIDB4YTlhMjg3ZTUgLy8gbWV0aG9kICJjb250cmFjdF9yZWRlZW0odWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2Jvb3RzdHJhcCAqYWJpX3JvdXRlX2FwcHJvdmUgKmFiaV9yb3V0ZV9yZWNlaXZlICphYmlfcm91dGVfY29udHJhY3RfcmVkZWVtCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Paymnet",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "approve",
        "desc": "Increases the approved spending balance of the given address by the given amount.\nIf the approved spending balance for the given address does not exist, it is created.",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The address for which to increase the approved spending balance"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount to increase the approved spending balance"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "receive",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "contract_redeem",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Paymnet smart contract.
 */
export type Paymnet = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()uint64' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'approve(address,uint64)bool' | 'approve', {
      argsObj: {
        /**
         * The address for which to increase the approved spending balance
         */
        addr: string
        /**
         * The amount to increase the approved spending balance
         */
        amount: bigint | number
      }
      argsTuple: [addr: string, amount: bigint | number]
      returns: boolean
    }>
    & Record<'receive()uint64' | 'receive', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'contract_redeem(uint64)void' | 'contract_redeem', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'token'?: IntegerState
      'tokenBalance'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PaymnetSig = keyof Paymnet['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PaymnetSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Paymnet smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PaymnetSig> = Paymnet['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Paymnet smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PaymnetSig> = Paymnet['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PaymnetCreateCalls = (typeof PaymnetCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PaymnetCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PaymnetDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PaymnetCreateCalls) => PaymnetCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PaymnetCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Paymnet smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve(address,uint64)bool ABI method
   *
   * Increases the approved spending balance of the given address by the given amount.
If the approved spending balance for the given address does not exist, it is created.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approve(args: MethodArgs<'approve(address,uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve(address,uint64)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the receive()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static receive(args: MethodArgs<'receive()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'receive()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_redeem(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractRedeem(args: MethodArgs<'contract_redeem(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_redeem(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Paymnet smart contract
 */
export class PaymnetClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PaymnetClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Paymnet['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Paymnet smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PaymnetDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PaymnetCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Paymnet smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PaymnetCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Paymnet smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PaymnetCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the approve(address,uint64)bool ABI method.
   *
   * Increases the approved spending balance of the given address by the given amount.
If the approved spending balance for the given address does not exist, it is created.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approve(args: MethodArgs<'approve(address,uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PaymnetCallFactory.approve(args, params))
  }

  /**
   * Calls the receive()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public receive(args: MethodArgs<'receive()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PaymnetCallFactory.receive(args, params))
  }

  /**
   * Calls the contract_redeem(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contractRedeem(args: MethodArgs<'contract_redeem(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PaymnetCallFactory.contractRedeem(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Paymnet['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get token() {
        return PaymnetClient.getIntegerState(state, 'token')
      },
      get tokenBalance() {
        return PaymnetClient.getIntegerState(state, 'tokenBalance')
      },
    }
  }

  public compose(): PaymnetComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approve(args: MethodArgs<'approve(address,uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      receive(args: MethodArgs<'receive()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.receive(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      contractRedeem(args: MethodArgs<'contract_redeem(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractRedeem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PaymnetComposer
  }
}
export type PaymnetComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PaymnetComposer<[...TReturns, MethodReturn<'bootstrap()uint64'>]>

  /**
   * Calls the approve(address,uint64)bool ABI method.
   *
   * Increases the approved spending balance of the given address by the given amount.
If the approved spending balance for the given address does not exist, it is created.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approve(args: MethodArgs<'approve(address,uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PaymnetComposer<[...TReturns, MethodReturn<'approve(address,uint64)bool'>]>

  /**
   * Calls the receive()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receive(args: MethodArgs<'receive()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PaymnetComposer<[...TReturns, MethodReturn<'receive()uint64'>]>

  /**
   * Calls the contract_redeem(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractRedeem(args: MethodArgs<'contract_redeem(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PaymnetComposer<[...TReturns, MethodReturn<'contract_redeem(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Paymnet smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PaymnetComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PaymnetComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PaymnetComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PaymnetComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PaymnetComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PaymnetComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
